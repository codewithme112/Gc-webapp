import React, { useState, useEffect } from 'react';
import { fetchTodayCount } from '../utils/fetchTodayCount.js';
import { SAVE_URL } from '../config.js';

// Checklist labels
const checklistLabels = [
  "рд╕рд░реНрд╡рд┐рд╕ рд╣рд┐рд╕реНрдЯреНрд░реА рджреЗрдЦреЗрдВ рдФрд░ рдЧреНрд░рд╛рд╣рдХ рдХреЛ рд╕реБрдЭрд╛рд╡ рджреЗрдВ",
  "рдЧрд┐рдпрд░ рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЗрдВрдЬрди рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдбрд┐рдлрд░реЗрдВрд╢рд┐рдпрд▓ рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреВрд▓реЗрдВрдЯ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ , рдХреВрд▓реЗрдВрдЯ рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдЬрд╛рдВрдЪреЗрдВ",
  "рдмреНрд░реЗрдХ рд╕реЗрдЯрд┐рдВрдЧ рдФрд░ рдмреНрд░реЗрдХ рд▓рд╛рдЗрдирд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреНрд▓рдЪ рд╕реЗрдЯрд┐рдВрдЧ рдФрд░ рдХреНрд▓рдЪ рдкрд╛рд░реНрдЯреНрд╕ рдЬрд╛рдВрдЪреЗрдВ",
  "рд╡реНрд╣реАрд▓ рдЕрд▓рд╛рдЗрдирдореЗрдВрдЯ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡ рджреЗрдВ",
  "рд▓реИрдкрдЯреЙрдк рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡ рджрд┐рдпрд╛ рдЧрдпрд╛",
  "рд╕рднреА рдПрдпрд░ рд╣реЛрд╕реЗрд╕ рдЬрд╛рдВрдЪреЗрдВ",
  "рдлреНрдпреВрд▓ рдкрд╛рдЗрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреВрд▓рдВрдЯ рдкрд╛рдЗрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рдПрдпрд░ рдлрд┐рд▓реНрдЯрд░ рдХреА рд╕реНрдерд┐рддрд┐ рдФрд░ рдЗрдВрдбрд┐рдХреЗрдЯрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЗрдВрдЬрди рдорд╛рдЙрдВрдЯрд┐рдВрдЧ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЯреИрдВрдХ рдХреИрдк рдФрд░ рдбреАрдЬрд▓ рдЯреИрдВрдХ рдХреИрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рд╕реНрдЯреЗрд░рд┐рдВрдЧ рдСрдпрд▓ рд╕реНрддрд░ рдФрд░ рд▓реАрдХ рдЬрд╛рдВрдЪреЗрдВ",
  "рдмреИрдЯрд░реА рд╡рд╛рдЯрд░, рдмрд▓реНрдм, рдлреНрдпреВрдЬ рдЬрд╛рдВрдЪреЗрдВ",
  "рд╡рд╛рдЗрдкрд░ рдмреНрд▓реЗрдб рдЬрд╛рдВрдЪреЗрдВ",
  "рдпреВрд░рд┐рдпрд╛ рд▓реЗрд╡рд▓ рдЬрд╛рдВрдЪреЗрдВ , рдпреВрд░рд┐рдпрд╛(DEF) рдХреА рдЧреБрдгрд╡рддреНрддрд╛ рдЬрд╛рдВрдЪреЗрдВ",
  "рдлреИрди рдмреЗрд▓реНрдЯ рдЬрд╛рдВрдЪреЗрдВ",
  "рдПрд╕реА рдЧреИрд╕ рд░рд┐рдлрд┐рд▓рд┐рдВрдЧ",
  "рд░реЗрдЯреНрд░реЛ рдЬрд╛рдВрдЪреЗрдВ",
  "рд▓реЛрдб рдЭреЗрд▓рдиреЗ рд╡рд╛рд▓реЗ рдЬреЛрдЗрдВрдЯреНрд╕ рдХреА рдЧреНрд░реЗрд╕рд┐рдВрдЧ рдЬрд╛рдВрдЪреЗрдВ"
];

// Helper to format datetime to "dd/MM/yyyy HH:mm:ss"
function formatDateTime(dateObj) {
  // Send in ISO format: yyyy-MM-ddTHH:mm:ss
  return dateObj.toISOString().slice(0,19); // "2025-08-14T14:30:00"
}


const ChecksheetForm = () => {
  const [formData, setFormData] = useState({
    datetime: '',
    registration: '',
    kilometers: '',
    model: '',
    otherIssue: '',
    items: checklistLabels.map(() => ({ status: 'рд╣рд╛рдБ', remark: 'рдареАрдХ рд╣реИ' }))
  });

  const [todayCount, setTodayCount] = useState(0);
  const [submitting, setSubmitting] = useState(false);

  // On mount: set current datetime and fetch today's count
  useEffect(() => {
    const now = new Date();
    setFormData(prev => ({
      ...prev,
      datetime: formatDateTime(now)
    }));

    fetchTodayCount().then(setTodayCount);
  }, []);

  const handleChange = (index, value) => {
    const updatedItems = [...formData.items];
    updatedItems[index].status = value;
    updatedItems[index].remark = value === 'рдирд╣реАрдВ' ? '' : 'рдареАрдХ рд╣реИ';
    setFormData({ ...formData, items: updatedItems });
  };

  const handleRemarkChange = (index, value) => {
    const updatedItems = [...formData.items];
    updatedItems[index].remark = value;
    setFormData({ ...formData, items: updatedItems });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (submitting) return;
    setSubmitting(true);

    // Ensure Other Issue defaults to "рдареАрдХ рд╣реИ"
    const finalFormData = {
      ...formData,
      otherIssue: formData.otherIssue && formData.otherIssue.trim() !== '' 
        ? formData.otherIssue 
        : 'рдареАрдХ рд╣реИ'
    };

    try {
      const response = await fetch(SAVE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(finalFormData),
      });

      if (response.ok) {
        alert('тЬЕ рд╕реЗрд╡ рд╣реЛ рдЧрдпрд╛!');
        setFormData({
          datetime: formatDateTime(new Date()),
          registration: '',
          kilometers: '',
          model: '',
          otherIssue: '',
          items: checklistLabels.map(() => ({ status: 'рд╣рд╛рдБ', remark: 'рдареАрдХ рд╣реИ' }))
        });

        const newCount = await fetchTodayCount();
        setTodayCount(newCount);
      } else {
        alert('тЭМ рдХреБрдЫ рдЧрд▓рдд рд╣реЛ рдЧрдпрд╛!');
      }
    } catch (err) {
      console.error(err);
      alert('тЭМ рдиреЗрдЯрд╡рд░реНрдХ рд╕рдорд╕реНрдпрд╛! рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="container">
      <h2 style={{ textAlign: 'center' }}>ЁЯФз рдЬрдирд░рд▓ рдЪреЗрдХрдЕрдк рдлреЙрд░реНрд╕рдЯ</h2>
      <p>рдЖрдЬ рдХреА рдХреБрд▓ рдПрдВрдЯреНрд░реА: <strong>{todayCount}</strong></p>

      <form onSubmit={handleSubmit}>
        <label>рд╡рд╛рд╣рди рдирдВрдмрд░:</label>
        <input
          style={{ backgroundColor: '#E3E7FF' }}
          value={formData.registration}
          onChange={(e) => {
            const val = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            setFormData({ ...formData, registration: val });
          }}
          required
        />

        <label>рдХрд┐рд▓реЛрдореАрдЯрд░:</label>
        <input
          style={{ backgroundColor: '#E3E7FF' }}
          value={formData.kilometers}
          onChange={(e) => {
            const val = e.target.value.replace(/\D/g, '').slice(0, 8);
            setFormData({ ...formData, kilometers: val });
          }}
          required
        />

        <label>рдореЙрдбрд▓ рдирдВрдмрд░:</label>
        <input
          style={{ backgroundColor: '#E3E7FF' }}
          value={formData.model}
          onChange={(e) => {
            const val = e.target.value.replace(/\D/g, '').slice(0, 4);
            setFormData({ ...formData, model: val });
          }}
          required
        />

        <p style={{ fontWeight: 'bold', border: '1px solid white' }}>
          ЁЯУЕ рджрд┐рдирд╛рдВрдХ рдФрд░ рд╕рдордп: {formData.datetime}
        </p>

        {checklistLabels.map((label, index) => (
          <div
            key={index}
            style={{
              marginTop: '10px',
              backgroundColor: '#E3E7FF',
              padding: '4px',
              margin: '3px',
              borderRadius: '3px',
              fontWeight: 'bold',
            }}
          >
            <label>{index + 1}. {label}</label><br />
            <select
              style={{ backgroundColor: '#7187F0', color: 'white' }}
              value={formData.items[index].status}
              onChange={(e) => handleChange(index, e.target.value)}
            >
              <option value="рд╣рд╛рдБ">тЬЕ</option>
              <option value="рдирд╣реАрдВ">тЭМ</option>
            </select>
            {formData.items[index].status === 'рдирд╣реАрдВ' && (
              <input
                style={{ backgroundColor: '#E3E7FF', border: '1px solid black' }}
                type="text"
                placeholder="рдЯрд┐рдкреНрдкрдгреА рджрд░реНрдЬ рдХрд░реЗрдВ"
                value={formData.items[index].remark}
                onChange={(e) => handleRemarkChange(index, e.target.value)}
                required
              />
            )}
          </div>
        ))}

        <label style={{ fontWeight: 'bold' }}>ЁЯЫая╕П рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ (рдЕрдЧрд░ рдХреЛрдИ рд╣реЛ):</label>
        <textarea
          value={formData.otherIssue || ''}
          onChange={(e) => setFormData({ ...formData, otherIssue: e.target.value })}
          placeholder="рдпрд╣рд╛рдБ рдХреЛрдИ рдФрд░ рджрд┐рдХреНрдХрдд рд▓рд┐рдЦреЗрдВ..."
          rows={3}
          style={{ width: '100%', marginBottom: '0rem', backgroundColor: '#E3E7FF' }}
        ></textarea>

        <p>ЁЯФЦ рдПрдбрд╡рд╛рдЗрдЬрд░: <strong>Ranveer Singh Rathore</strong></p>

        <button type="submit" disabled={submitting}>тЬЕ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ</button>
      </form>
    </div>
  );
};

export default ChecksheetForm;
