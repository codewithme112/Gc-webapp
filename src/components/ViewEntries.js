import React, { useEffect, useState } from 'react';
import PrintableEntry from './PrintableEntry';

const checklistLabels = [
  "рд╕рд░реНрд╡рд┐рд╕ рд╣рд┐рд╕реНрдЯреНрд░реА рджреЗрдЦреЗрдВ рдФрд░ рдЧреНрд░рд╛рд╣рдХ рдХреЛ рд╕реБрдЭрд╛рд╡ рджреЗрдВ",
  "рдЧрд┐рдпрд░ рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЗрдВрдЬрди рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдбрд┐рдлрд░реЗрдВрд╢рд┐рдпрд▓ рдСрдпрд▓ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреВрд▓реЗрдВрдЯ рд╕реНрддрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдмреНрд░реЗрдХ рд╕реЗрдЯрд┐рдВрдЧ рдФрд░ рдмреНрд░реЗрдХ рд▓рд╛рдЗрдирд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреНрд▓рдЪ рд╕реЗрдЯрд┐рдВрдЧ рдФрд░ рдХреНрд▓рдЪ рдкрд╛рд░реНрдЯреНрд╕ рдЬрд╛рдВрдЪреЗрдВ",
  "рд╡реНрд╣реАрд▓ рдЕрд▓рд╛рдЗрдирдореЗрдВрдЯ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡ рджреЗрдВ",
  "рд▓реИрдкрдЯреЙрдк рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡ рджрд┐рдпрд╛ рдЧрдпрд╛",
  "рд╕рднреА рдПрдпрд░ рд╣реЛрд╕реЗрд╕ рдЬрд╛рдВрдЪреЗрдВ",
  "рдлреНрдпреВрд▓ рдкрд╛рдЗрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рдХреВрд▓рдВрдЯ рдкрд╛рдЗрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рдПрдпрд░ рдлрд┐рд▓реНрдЯрд░ рдХреА рд╕реНрдерд┐рддрд┐ рдФрд░ рдЗрдВрдбрд┐рдХреЗрдЯрд░ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЗрдВрдЬрди рдорд╛рдЙрдВрдЯрд┐рдВрдЧ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЯреИрдВрдХ рдХреИрдк рдФрд░ рдбреАрдЬрд▓ рдЯреИрдВрдХ рдХреИрдк рдЬрд╛рдВрдЪреЗрдВ",
  "рд╕реНрдЯреЗрд░рд┐рдВрдЧ рдСрдпрд▓ рд╕реНрддрд░ рдФрд░ рд▓реАрдХ рдЬрд╛рдВрдЪреЗрдВ",
  "рдмреИрдЯрд░реА рд╡рд╛рдЯрд░, рдмрд▓реНрдм, рдлреНрдпреВрдЬ рдЬрд╛рдВрдЪреЗрдВ",
  "рд╡рд╛рдЗрдкрд░ рдмреНрд▓реЗрдб рдЬрд╛рдВрдЪреЗрдВ",
  "рдпреВрд░рд┐рдпрд╛ рд▓реЗрд╡рд▓ рдЬрд╛рдВрдЪреЗрдВ",
  "рдлреИрди рдмреЗрд▓реНрдЯ рдЬрд╛рдВрдЪреЗрдВ",
  "рдПрд╕реА рдЧреИрд╕ рд░рд┐рдлрд┐рд▓рд┐рдВрдЧ",
  "рд░реЗрдЯреНрд░реЛ рдЬрд╛рдВрдЪреЗрдВ",
  "рд▓реЛрдб рдЭреЗрд▓рдиреЗ рд╡рд╛рд▓реЗ рдЬреЛрдЗрдВрдЯреНрд╕ рдХреА рдЧреНрд░реЗрд╕рд┐рдВрдЧ рдЬрд╛рдВрдЪреЗрдВ",
  "рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛"
];

const FINAL_URL = 'https://script.google.com/macros/s/AKfycbybZns1p4daGCK4yh1DiQa60lj_6e7GBL3DWzFktqb7g7mcdevYZjJvA2W9UbDq7IhU6A/exec';

const formatDate = (rawDate) => {
  const d = new Date(rawDate);
  if (isNaN(d)) return rawDate;
  return d.toLocaleDateString('hi-IN');
};

const formatTime = (rawTime) => {
  const t = new Date(rawTime);
  if (isNaN(t)) return rawTime;
  return t.toLocaleTimeString('hi-IN', {
    hour: '2-digit',
    minute: '2-digit',
  });
};

const ViewEntries = () => {
  const [entries, setEntries] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedEntry, setSelectedEntry] = useState(null);
  const [loading, setLoading] = useState(false); // <-- Add this

  const fetchEntries = async (url) => {
    try {
      setLoading(true); // <-- Start loading
      const res = await fetch(url);
      const data = await res.json();
      setEntries(data);
    } catch (err) {
      console.error('тЭМ Error fetching entries:', err);
      alert('рдиреЗрдЯрд╡рд░реНрдХ рд╕рдорд╕реНрдпрд╛! рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
    } finally {
      setLoading(false); // <-- Stop loading
    }
  };

  useEffect(() => {
    fetchEntries(`${FINAL_URL}?type=today`);
  }, []);

  const handleSearch = () => {
    if (searchText.trim()) {
      fetchEntries(`${FINAL_URL}?search=${searchText.trim()}`);
    } else if (selectedDate) {
      handleDateFilter();
    } else {
      fetchEntries(`${FINAL_URL}?type=today`);
    }
  };

  const handleDateFilter = () => {
    if (selectedDate) {
      const [yyyy, mm, dd] = selectedDate.split('-');
      const formatted = `${dd}-${mm}-${yyyy}`;
      fetchEntries(`${FINAL_URL}?date=${formatted}`);
    } else {
      fetchEntries(`${FINAL_URL}?type=today`);
    }
  };

  const renderSummary = (items, otherIssue) => {
    const notOk = items
      .map((item, i) =>
        item.status === 'рдирд╣реАрдВ'
          ? `${i + 1}. ${checklistLabels[i]} тАФ ${item.remark}`
          : null
      )
      .filter(Boolean);
  
    // Fix: Ensure otherIssue is a string before calling trim
    if (typeof otherIssue === 'string' && otherIssue.trim()) {
      notOk.push(`23. рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ тАФ ${otherIssue}`);
    }
  
    if (notOk.length === 0) return <span style={{ color: 'green' }}>тЬЕ All OK</span>;
  
    return (
      <div style={{ color: 'red' }}>
        {notOk.map((item, i) => <div key={i}>тЭМ {item}</div>)}
        <div>тЬЕ Other All OK</div>
      </div>
    );
  };

  return (
    <div className="entries-card-list">
      <h2 style={{ textAlign: 'center' }}>ЁЯУЛ рд╕рднреА рдЪреЗрдХрд╢реАрдЯ рдПрдВрдЯреНрд░реА</h2>
      {loading && (
        <div className="loader-overlay">
          <div className="loader"></div>
        </div>
      )}

      <div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}>
        <input
          type="text"
          placeholder="рд╡рд╛рд╣рди рдирдВрдмрд░ рдЦреЛрдЬреЗрдВ..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <input
          type="date"
          value={selectedDate}
          onChange={(e) => setSelectedDate(e.target.value)}
        />
        <button onClick={handleSearch}>ЁЯФН рдЦреЛрдЬреЗрдВ</button>
      </div>

      <div className="card-grid">
        {[...entries].reverse().map((entry, index) => (
          <div className="entry-card" key={index}>
            <div className="card-row"><strong>#{index + 1}</strong></div>
            <div className="card-row"><strong>рд╡рд╛рд╣рди рдирдВрдмрд░:</strong> {entry.registration}</div>
            <div className="card-row"><strong>KM:</strong> {entry.kilometers}</div>
            <div className="card-row"><strong>рдореЙрдбрд▓:</strong> {entry.model}</div>
            <div className="card-row"><strong>ЁЯУЕ рддрд╛рд░реАрдЦ:</strong> {formatDate(entry.date)}</div>
            <div className="card-row"><strong>тП░ рд╕рдордп:</strong> {formatTime(entry.time)}</div>
            <div className="card-row"><strong>рд╕реНрдерд┐рддрд┐:</strong> {renderSummary(entry.items, entry.otherIssue)}</div>
            
            <div style={{ display: 'flex', justifyContent: 'space-between', gap: '10px', marginTop: '10px' }}>
              {/* <button onClick={() => window.print()}>ЁЯЦия╕П рдкреНрд░рд┐рдВрдЯ</button> */}
              <button onClick={() => setSelectedEntry(entry)}>ЁЯУД View Report</button>
            </div>
          </div>
        ))}
      </div>

     {selectedEntry && (
  <div className="overlay">
    <div className="modal">
      <button onClick={() => setSelectedEntry(null)}>тЭМ рдмрдВрдж рдХрд░реЗрдВ</button>
      <div className="print-area">
        <PrintableEntry entry={selectedEntry} checklistLabels={checklistLabels} />
      </div>
      <button onClick={() => window.print()}>ЁЯЦия╕П рдкреНрд░рд┐рдВрдЯ</button>
    </div>
  </div>
)}

    </div>
  );
};

export default ViewEntries;
