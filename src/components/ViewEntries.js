import React, { useEffect, useState } from "react";
import PrintableEntry from "./PrintableEntry.js";
import { GOOGLE_SCRIPT_URL } from "../config.js";

const checklistLabels = [
  "‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç",
  "‡§ó‡§ø‡§Ø‡§∞ ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§á‡§Ç‡§ú‡§® ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§°‡§ø‡§´‡§∞‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤ ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•Ç‡§≤‡•á‡§Ç‡§ü ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§¨‡•ç‡§∞‡•á‡§ï ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§¨‡•ç‡§∞‡•á‡§ï ‡§≤‡§æ‡§á‡§®‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•ç‡§≤‡§ö ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§ï‡•ç‡§≤‡§ö ‡§™‡§æ‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§µ‡•ç‡§π‡•Ä‡§≤ ‡§Ö‡§≤‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç",
  "‡§≤‡•à‡§™‡§ü‡•â‡§™ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
  "‡§∏‡§≠‡•Ä ‡§è‡§Ø‡§∞ ‡§π‡•ã‡§∏‡•á‡§∏ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§´‡•ç‡§Ø‡•Ç‡§≤ ‡§™‡§æ‡§á‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•Ç‡§≤‡§Ç‡§ü ‡§™‡§æ‡§á‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§è‡§Ø‡§∞ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§á‡§Ç‡§ú‡§® ‡§Æ‡§æ‡§â‡§Ç‡§ü‡§ø‡§Ç‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ü‡•à‡§Ç‡§ï ‡§ï‡•à‡§™ ‡§î‡§∞ ‡§°‡•Ä‡§ú‡§≤ ‡§ü‡•à‡§Ç‡§ï ‡§ï‡•à‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§∏‡•ç‡§ü‡•á‡§∞‡§ø‡§Ç‡§ó ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§î‡§∞ ‡§≤‡•Ä‡§ï ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§¨‡•à‡§ü‡§∞‡•Ä ‡§µ‡§æ‡§ü‡§∞, ‡§¨‡§≤‡•ç‡§¨, ‡§´‡•ç‡§Ø‡•Ç‡§ú ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§µ‡§æ‡§á‡§™‡§∞ ‡§¨‡•ç‡§≤‡•á‡§° ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ ‡§≤‡•á‡§µ‡§≤ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§´‡•à‡§® ‡§¨‡•á‡§≤‡•ç‡§ü ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§è‡§∏‡•Ä ‡§ó‡•à‡§∏ ‡§∞‡§ø‡§´‡§ø‡§≤‡§ø‡§Ç‡§ó",
  "‡§∞‡•á‡§ü‡•ç‡§∞‡•ã ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§≤‡•ã‡§° ‡§ù‡•á‡§≤‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ú‡•ã‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•Ä ‡§ó‡•ç‡§∞‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ",
];

const FINAL_URL = GOOGLE_SCRIPT_URL;

const formatDate = (dateTimeStr) => {
  if (!dateTimeStr) return "";
  const d = new Date(dateTimeStr);
  return isNaN(d) ? dateTimeStr : d.toLocaleDateString("hi-IN");
};

const formatTime = (dateTimeStr) => {
  if (!dateTimeStr) return "";
  const d = new Date(dateTimeStr);
  return isNaN(d)
    ? dateTimeStr
    : d.toLocaleTimeString("hi-IN", { hour: "2-digit", minute: "2-digit", second: "2-digit" });
};


const ViewEntries = () => {
  const [entries, setEntries] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedEntry, setSelectedEntry] = useState(null);
  const [loading, setLoading] = useState(false);
  const [customerDecisions, setCustomerDecisions] = useState({});
  const [repairStatuses, setRepairStatuses] = useState({});

 const fetchEntries = async (query) => {
  try {
    setLoading(true);
    const res = await fetch(query);
    const data = await res.json();
    setEntries(
      Array.isArray(data) 
        ? data 
        : Array.isArray(data.entries) 
          ? data.entries 
          : []
    );
  } catch (err) {
    console.error("‚ùå Fetch error:", err);
    alert("‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§");
  } finally {
    setLoading(false);
  }
};

  // Load only today's entries on first load
useEffect(() => {
  fetchEntries(`${FINAL_URL}?type=today`);
}, []);

const handleSearch = () => {
  if (searchText.trim()) {
    fetchEntries(`${FINAL_URL}?search=${encodeURIComponent(searchText.trim())}`);
  } else if (selectedDate) {
    const [yyyy, mm, dd] = selectedDate.split("-");
    fetchEntries(`${FINAL_URL}?date=${dd}/${mm}/${yyyy}`);

  } else {
    fetchEntries(`${FINAL_URL}?type=today`);
  }
};



  const renderSummary = (items, otherIssue) => {
    if (!Array.isArray(items)) {
      return <span style={{ color: "red" }}>‚ùå ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç</span>;
    }

    const notOk = items
      .map((item, i) =>
        item?.status === "‡§®‡§π‡•Ä‡§Ç"
          ? `${i + 1}. ${checklistLabels[i] || "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§ö‡•á‡§ï"} ‚Äî ${item?.remark || ""}`
          : null
      )
      .filter(Boolean);

    if (otherIssue && typeof otherIssue === "string" && otherIssue.trim()) {
      notOk.push(`23. ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‚Äî ${otherIssue}`);
    }

    return notOk.length === 0 ? (
      <span style={{ color: "green" }}>‚úÖ All OK</span>
    ) : (
      <div style={{ color: "red" }}>
        {notOk.map((item, i) => (
          <div key={i}>‚ùå {item}</div>
        ))}
        <div>‚úÖ Other All OK</div>
      </div>
    );
  };

  const handleCustomerDecisionChange = (regNo, value) => {
  setCustomerDecisions(prev => ({ ...prev, [regNo]: value }));
  if (value === "Denied") {
    setRepairStatuses(prev => ({ ...prev, [regNo]: "Denied" }));
  } else if (value === "Pending") {
    setRepairStatuses(prev => ({ ...prev, [regNo]: "Pending" }));
  }
};

const handleRepairStatusChange = (regNo, value) => {
  setRepairStatuses(prev => ({ ...prev, [regNo]: value }));
};


  const handleUpdateStatus = async (entry) => {
  const customerDecision = customerDecisions[entry.registration] || "Pending";
  const repairStatus = repairStatuses[entry.registration] || "Pending";


    try {
    setLoading(true);
    const res = await fetch(
      `${FINAL_URL}?action=updateStatus&registration=${encodeURIComponent(
        entry.registration
      )}&customerDecision=${encodeURIComponent(
        customerDecision
      )}&repairStatus=${encodeURIComponent(repairStatus)}`
    );
    const data = await res.json();
    if (data.success) {
      alert("‚úÖ Status updated successfully!");
      fetchEntries(`${FINAL_URL}?type=today`);
    } else {
      alert("‚ùå Failed to update status.");
    }
  } catch (err) {
    console.error("‚ùå Update error:", err);
    alert("‚ùå Network error while updating.");
  } finally {
    setLoading(false);
  }
};





  return (
    <div className="entries-card-list">
      <h2 style={{ textAlign: "center" }}>üìã ‡§∏‡§≠‡•Ä ‡§ö‡•á‡§ï‡§∂‡•Ä‡§ü ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä</h2>

      {loading && (
        <div className="loader-overlay">
          <div className="loader"></div>
        </div>
      )}

      {/* Search and Date filter */}
      <div style={{ display: "flex", gap: "10px", marginBottom: "15px" }}>
        <input
          type="text"
          placeholder="‡§µ‡§æ‡§π‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
        />
        <input
          type="date"
          value={selectedDate}
          onChange={(e) => setSelectedDate(e.target.value)}
        />
        <button onClick={handleSearch}>üîç ‡§ñ‡•ã‡§ú‡•á‡§Ç</button>
      </div>

      {/* Entries */}
      <div className="card-grid">
        {[...entries].reverse().map((entry, index) => (
          <div className="entry-card" key={index}>
            <div className="card-row"><strong>#{index + 1}</strong></div>
            <div className="card-row"><strong>‡§µ‡§æ‡§π‡§® ‡§®‡§Ç‡§¨‡§∞:</strong> {entry.registration}</div>
            <div className="card-row"><strong>KM:</strong> {entry.kilometers}</div>
            <div className="card-row"><strong>‡§Æ‡•â‡§°‡§≤:</strong> {entry.model}</div>
           <div className="card-row"><strong>üìÖ ‡§§‡§æ‡§∞‡•Ä‡§ñ:</strong> {formatDate(entry.dateTime)}</div>
<div className="card-row"><strong>‚è∞ ‡§∏‡§Æ‡§Ø:</strong> {formatTime(entry.dateTime)}</div>

            <div className="card-row"><strong>‡§∏‡•ç‡§•‡§ø‡§§‡§ø:</strong> {renderSummary(entry.items, entry.otherIssue)}</div>

            <div style={{ marginTop: "10px" }}>
              <label>Customer Decision: </label>
              <select
  value={customerDecisions[entry.registration] || "Pending"}
  onChange={(e) => handleCustomerDecisionChange(entry.registration, e.target.value)}
>

                <option value="Pending">Pending</option>
                <option value="Accepted">Accepted</option>
                <option value="Denied">Denied</option>
              </select>
            </div>

            <div style={{ marginTop: "10px" }}>
              <label>Repair Status: </label>
              <select
                value={repairStatuses[index] || "Pending"}
                onChange={(e) => handleRepairStatusChange(index, e.target.value)}
                disabled={customerDecisions[index] !== "Accepted"}
              >
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
                <option value="Denied">Denied</option>
              </select>
            </div>

            <div style={{ marginTop: "10px" }}>
              <button
                onClick={() => handleUpdateStatus(entry, index)}
                style={{
                  background: "green",
                  color: "white",
                  padding: "5px 10px",
                  border: "none",
                  borderRadius: "5px",
                }}
              >
                ‚úÖ Update Status
              </button>
            </div>

            <div style={{ display: "flex", justifyContent: "space-between", gap: "10px", marginTop: "10px" }}>
              <button onClick={() => setSelectedEntry(entry)}>üìÑ View Report</button>
            </div>
          </div>
        ))}
      </div>

      {selectedEntry && (
        <div className="overlay">
          <div className="modal">
            <button onClick={() => setSelectedEntry(null)}>‚ùå ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç</button>
            <div className="print-area">
              <PrintableEntry entry={selectedEntry} checklistLabels={checklistLabels} />
            </div>
            <button onClick={() => window.print()}>üñ®Ô∏è ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ViewEntries;
