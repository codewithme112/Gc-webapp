import React, { useEffect, useState } from 'react';
import PrintableEntry from './PrintableEntry';

const checklistLabels = [
   "‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡•ã ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç",
  "‡§ó‡§ø‡§Ø‡§∞ ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§á‡§Ç‡§ú‡§® ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§°‡§ø‡§´‡§∞‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤ ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•Ç‡§≤‡•á‡§Ç‡§ü ‡§∏‡•ç‡§§‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§¨‡•ç‡§∞‡•á‡§ï ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§¨‡•ç‡§∞‡•á‡§ï ‡§≤‡§æ‡§á‡§®‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•ç‡§≤‡§ö ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§ï‡•ç‡§≤‡§ö ‡§™‡§æ‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§µ‡•ç‡§π‡•Ä‡§≤ ‡§Ö‡§≤‡§æ‡§á‡§®‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç",
  "‡§≤‡•à‡§™‡§ü‡•â‡§™ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
  "‡§∏‡§≠‡•Ä ‡§è‡§Ø‡§∞ ‡§π‡•ã‡§∏‡•á‡§∏ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§´‡•ç‡§Ø‡•Ç‡§≤ ‡§™‡§æ‡§á‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ï‡•Ç‡§≤‡§Ç‡§ü ‡§™‡§æ‡§á‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§è‡§Ø‡§∞ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§á‡§Ç‡§ú‡§® ‡§Æ‡§æ‡§â‡§Ç‡§ü‡§ø‡§Ç‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§ü‡•à‡§Ç‡§ï ‡§ï‡•à‡§™ ‡§î‡§∞ ‡§°‡•Ä‡§ú‡§≤ ‡§ü‡•à‡§Ç‡§ï ‡§ï‡•à‡§™ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§∏‡•ç‡§ü‡•á‡§∞‡§ø‡§Ç‡§ó ‡§ë‡§Ø‡§≤ ‡§∏‡•ç‡§§‡§∞ ‡§î‡§∞ ‡§≤‡•Ä‡§ï ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§¨‡•à‡§ü‡§∞‡•Ä ‡§µ‡§æ‡§ü‡§∞, ‡§¨‡§≤‡•ç‡§¨, ‡§´‡•ç‡§Ø‡•Ç‡§ú ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§µ‡§æ‡§á‡§™‡§∞ ‡§¨‡•ç‡§≤‡•á‡§° ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ ‡§≤‡•á‡§µ‡§≤ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§´‡•à‡§® ‡§¨‡•á‡§≤‡•ç‡§ü ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§è‡§∏‡•Ä ‡§ó‡•à‡§∏ ‡§∞‡§ø‡§´‡§ø‡§≤‡§ø‡§Ç‡§ó",
  "‡§∞‡•á‡§ü‡•ç‡§∞‡•ã ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
  "‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ"
];

const ViewEntries = () => {
  const [entries, setEntries] = useState([]);

  useEffect(() => {
    fetch('https://script.google.com/macros/s/AKfycbzY3jaVoo3iYG-HAw10Zm4KNvn9Y3YgGzvGwCftm7zsZIXaHwN5w8Irl_lYVcQ3jpGIjQ/exec')
      .then((res) => res.json())
      .then((data) => setEntries(data))
      .catch((err) => console.error(err));
  }, []);

  const formatDate = (rawDate) => {
    const d = new Date(rawDate);
    if (isNaN(d)) return '‚Äî';
    return d.toLocaleDateString('hi-IN');
  };

  const formatTime = (rawTime) => {
    const t = new Date(rawTime);
    if (isNaN(t)) return '‚Äî';
    return t.toLocaleTimeString('hi-IN', {
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const renderSummary = (items, otherIssue) => {
    const notOk = items
      .map((item, i) =>
        item.status === '‡§®‡§π‡•Ä‡§Ç' ? `${i + 1}. ${item.label || checklistLabels[i]} ‚Äî ${item.remark}` : null
      )
      .filter(Boolean);

    if (otherIssue && otherIssue.trim() !== '') {
      notOk.push(`23. ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‚Äî ${otherIssue}`);
    }

    if (notOk.length === 0) {
      return <span style={{ color: 'green' }}>‚úÖ All OK</span>;
    }

    return (
      <div style={{ color: 'red' }}>
        {notOk.map((item, i) => (
          <div key={i}>‚ùå {item}</div>
        ))}
        <div>‚úÖ Other All OK</div>
      </div>
    );
  };

  const handlePrint = (entry) => {
    const printWindow = window.open('', '', 'width=800,height=700');
    printWindow.document.write(`
      <html>
        <head>
          <title>Checksheet Print</title>
        </head>
        <body>
          <div id="print-root"></div>
        </body>
      </html>
    `);
    printWindow.document.close();

    setTimeout(() => {
      const root = printWindow.document.getElementById('print-root');
      const container = document.createElement('div');
      printWindow.document.body.appendChild(container);

      import('react-dom/server').then((ReactDOMServer) => {
        const html = ReactDOMServer.renderToStaticMarkup(
          <PrintableEntry entry={entry} checklistLabels={checklistLabels} />
        );
        container.innerHTML = html;
        printWindow.print();
        printWindow.close();
      });
    }, 300);
  };

  return (
    <div className="entries-card-list">
      <h2 style={{ textAlign: 'center' }}>üìã ‡§∏‡§≠‡•Ä ‡§ö‡•á‡§ï‡§∂‡•Ä‡§ü ‡§è‡§Ç‡§ü‡•ç‡§∞‡•Ä</h2>
      <div className="card-grid">
        {[...entries].reverse().map((entry, index) => (
          <div className="entry-card" key={index}>
            <div className="card-row"><strong>#{index + 1}</strong></div>
            <div className="card-row"><strong>‡§µ‡§æ‡§π‡§® ‡§®‡§Ç‡§¨‡§∞:</strong> {entry.registration}</div>
            <div className="card-row"><strong>KM:</strong> {entry.kilometers}</div>
            <div className="card-row"><strong>‡§Æ‡•â‡§°‡§≤:</strong> {entry.model}</div>
            <div className="card-row"><strong>‡§§‡§æ‡§∞‡•Ä‡§ñ:</strong> {formatDate(entry.date)}</div>
            <div className="card-row"><strong>‡§∏‡§Æ‡§Ø:</strong> {formatTime(entry.time)}</div>
            <div className="card-row"><strong>‡§∏‡•ç‡§•‡§ø‡§§‡§ø:</strong> {renderSummary(entry.items, entry.otherIssue)}</div>

            <div className="card-row">
              <strong>‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:</strong>{' '}
              {entry.otherIssue && entry.otherIssue.trim() !== ''
                ? entry.otherIssue
                : '‚úÖ ‡§ï‡•ã‡§à ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç'}
            </div>

            <button
              onClick={() => handlePrint(entry)}
              style={{
                marginTop: '10px',
                padding: '6px 10px',
                backgroundColor: '#ffc107',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
              }}
            >
              üñ®Ô∏è ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü
            </button>
            <button
              onClick={() => {
                const reportWindow = window.open('', '', 'width=800,height=700');
                reportWindow.document.write(`
                  <html>
                    <head>
                      <title>Checksheet Report</title>
                    </head>
                    <body>
                      <div id="report-root"></div>
                    </body>
                  </html>
                `);
                reportWindow.document.close();
                setTimeout(() => {
                  import('react-dom/server').then((ReactDOMServer) => {
                    const html = ReactDOMServer.renderToStaticMarkup(
                      <PrintableEntry entry={entry} checklistLabels={checklistLabels} />
                    );
                    reportWindow.document.getElementById('report-root').innerHTML = html;
                  });
                }, 300);
              }}
              style={{
                marginTop: '10px',
                marginLeft: '10px',
                padding: '6px 10px',
                backgroundColor: '#17a2b8',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
              }}
            >
              üìÑ View Report
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ViewEntries;
